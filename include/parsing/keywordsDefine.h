//“—≤π≥‰÷¡2012
#define KEYWORDS_1364_1995 \
    { "always", TokenKind::AlwaysKeyword },\
    { "and", TokenKind::AndKeyword },\
    { "assign", TokenKind::AssignKeyword },\
    { "begin", TokenKind::BeginKeyword },\
    { "buf", TokenKind::BufKeyword },\
    { "bufif0", TokenKind::BufIf0Keyword },\
    { "bufif1", TokenKind::BufIf1Keyword },\
    { "case", TokenKind::CaseKeyword },\
    { "casex", TokenKind::CaseXKeyword },\
    { "casez", TokenKind::CaseZKeyword },\
    { "cmos", TokenKind::CmosKeyword },\
    { "deassign", TokenKind::DeassignKeyword },\
    { "default", TokenKind::DefaultKeyword },\
    { "defparam", TokenKind::DefParamKeyword },\
    { "disable", TokenKind::DisableKeyword },\
    { "edge", TokenKind::EdgeKeyword },\
    { "else", TokenKind::ElseKeyword },\
    { "end", TokenKind::EndKeyword },\
    { "endcase", TokenKind::EndCaseKeyword },\
    { "endfunction", TokenKind::EndFunctionKeyword },\
    { "endmodule", TokenKind::EndModuleKeyword },\
    { "endprimitive", TokenKind::EndPrimitiveKeyword },\
    { "endspecify", TokenKind::EndSpecifyKeyword },\
    { "endtable", TokenKind::EndTableKeyword },\
    { "endtask", TokenKind::EndTaskKeyword },\
    { "event", TokenKind::EventKeyword },\
    { "for", TokenKind::ForKeyword },\
    { "force", TokenKind::ForceKeyword },\
    { "forever", TokenKind::ForeverKeyword },\
    { "fork", TokenKind::ForkKeyword },\
    { "function", TokenKind::FunctionKeyword },\
    { "highz0", TokenKind::HighZ0Keyword },\
    { "highz1", TokenKind::HighZ1Keyword },\
    { "if", TokenKind::IfKeyword },\
    { "ifnone", TokenKind::IfNoneKeyword },\
    { "initial", TokenKind::InitialKeyword },\
    { "inout", TokenKind::InOutKeyword },\
    { "input", TokenKind::InputKeyword },\
    { "integer", TokenKind::IntegerKeyword },\
    { "join", TokenKind::JoinKeyword },\
    { "large", TokenKind::LargeKeyword },\
    { "macromodule", TokenKind::MacromoduleKeyword },\
    { "medium", TokenKind::MediumKeyword },\
    { "module", TokenKind::ModuleKeyword },\
    { "nand", TokenKind::NandKeyword },\
    { "negedge", TokenKind::NegEdgeKeyword },\
    { "nmos", TokenKind::NmosKeyword },\
    { "nor", TokenKind::NorKeyword },\
    { "not", TokenKind::NotKeyword },\
    { "notif0", TokenKind::NotIf0Keyword },\
    { "notif1", TokenKind::NotIf1Keyword },\
    { "or", TokenKind::OrKeyword },\
    { "output", TokenKind::OutputKeyword },\
    { "parameter", TokenKind::ParameterKeyword },\
    { "pmos", TokenKind::PmosKeyword },\
    { "posedge", TokenKind::PosEdgeKeyword },\
    { "primitive", TokenKind::PrimitiveKeyword },\
    { "pull0", TokenKind::Pull0Keyword },\
    { "pull1", TokenKind::Pull1Keyword },\
    { "pulldown", TokenKind::PullDownKeyword },\
    { "pullup", TokenKind::PullUpKeyword },\
    { "rcmos", TokenKind::RcmosKeyword },\
    { "real", TokenKind::RealKeyword },\
    { "realtime", TokenKind::RealTimeKeyword },\
    { "reg", TokenKind::RegKeyword },\
    { "release", TokenKind::ReleaseKeyword },\
    { "repeat", TokenKind::RepeatKeyword },\
    { "rnmos", TokenKind::RnmosKeyword },\
    { "rpmos", TokenKind::RpmosKeyword },\
    { "rtran", TokenKind::RtranKeyword },\
    { "rtranif0", TokenKind::RtranIf0Keyword },\
    { "rtranif1", TokenKind::RtranIf1Keyword },\
    { "scalared", TokenKind::ScalaredKeyword },\
    { "small", TokenKind::SmallKeyword },\
    { "specify", TokenKind::SpecifyKeyword },\
    { "specparam", TokenKind::SpecParamKeyword },\
    { "strong0", TokenKind::Strong0Keyword },\
    { "strong1", TokenKind::Strong1Keyword },\
    { "supply0", TokenKind::Supply0Keyword },\
    { "supply1", TokenKind::Supply1Keyword },\
    { "table", TokenKind::TableKeyword },\
    { "task", TokenKind::TaskKeyword },\
    { "time", TokenKind::TimeKeyword },\
    { "tran", TokenKind::TranKeyword },\
    { "tranif0", TokenKind::TranIf0Keyword },\
    { "tranif1", TokenKind::TranIf1Keyword },\
    { "tri", TokenKind::TriKeyword },\
    { "tri0", TokenKind::Tri0Keyword },\
    { "tri1", TokenKind::Tri1Keyword },\
    { "triand", TokenKind::TriAndKeyword },\
    { "trior", TokenKind::TriOrKeyword },\
    { "trireg", TokenKind::TriRegKeyword },\
    { "vectored", TokenKind::VectoredKeyword },\
    { "wait", TokenKind::WaitKeyword },\
    { "wand", TokenKind::WAndKeyword },\
    { "weak0", TokenKind::Weak0Keyword },\
    { "weak1", TokenKind::Weak1Keyword },\
    { "while", TokenKind::WhileKeyword },\
    { "wire", TokenKind::WireKeyword },\
    { "wor", TokenKind::WOrKeyword },\
    { "xor", TokenKind::XorKeyword },\
    { "xnor", TokenKind::XnorKeyword },\
    { "automatic", TokenKind::AutomaticKeyword },\
    { "endgenerate", TokenKind::EndGenerateKeyword },\
    { "generate", TokenKind::GenerateKeyword },\
    { "genvar", TokenKind::GenVarKeyword },\
    { "ifnone", TokenKind::IfNoneKeyword },\
    { "localparam", TokenKind::LocalParamKeyword },\
    { "noshowcancelled", TokenKind::NoShowCancelledKeyword },\
    { "pulsestyle_ondetect", TokenKind::PulseStyleOnDetectKeyword },\
    { "pulsestyle_onevent", TokenKind::PulseStyleOnEventKeyword },\
    { "showcancelled", TokenKind::ShowCancelledKeyword },\
    { "signed", TokenKind::SignedKeyword },\
    { "unsigned", TokenKind::UnsignedKeyword },\
    { "cell", TokenKind::CellKeyword },\
    { "config", TokenKind::ConfigKeyword },\
    { "design", TokenKind::DesignKeyword },\
    { "endconfig", TokenKind::EndConfigKeyword },\
    { "incdir", TokenKind::IncDirKeyword },\
    { "include", TokenKind::IncludeKeyword },\
    { "instance", TokenKind::InstanceKeyword },\
    { "liblist", TokenKind::LibListKeyword },\
    { "library", TokenKind::LibraryKeyword },\
    { "use", TokenKind::UseKeyword },\
    { "uwire", TokenKind::UWireKeyword },\
    { "alias", TokenKind::AliasKeyword },\
    { "always_comb", TokenKind::AlwaysCombKeyword },\
    { "always_ff", TokenKind::AlwaysFFKeyword },\
    { "always_latch", TokenKind::AlwaysLatchKeyword },\
    { "assert", TokenKind::AssertKeyword },\
    { "assume", TokenKind::AssumeKeyword },\
    { "before", TokenKind::BeforeKeyword },\
    { "bind", TokenKind::BindKeyword },\
    { "bins", TokenKind::BinsKeyword },\
    { "binsof", TokenKind::BinsOfKeyword },\
    { "bit", TokenKind::BitKeyword },\
    { "break", TokenKind::BreakKeyword },\
    { "byte", TokenKind::ByteKeyword },\
    { "chandle", TokenKind::CHandleKeyword },\
    { "class", TokenKind::ClassKeyword },\
    { "clocking", TokenKind::ClockingKeyword },\
    { "const", TokenKind::ConstKeyword },\
    { "constraint", TokenKind::ConstraintKeyword },\
    { "context", TokenKind::ContextKeyword },\
    { "continue", TokenKind::ContinueKeyword },\
    { "cover", TokenKind::CoverKeyword },\
    { "covergroup", TokenKind::CoverGroupKeyword },\
    { "coverpoint", TokenKind::CoverPointKeyword },\
    { "cross", TokenKind::CrossKeyword },\
    { "dist", TokenKind::DistKeyword },\
    { "do", TokenKind::DoKeyword },\
    { "endclass", TokenKind::EndClassKeyword },\
    { "endclocking", TokenKind::EndClockingKeyword },\
    { "endgroup", TokenKind::EndGroupKeyword },\
    { "endinterface", TokenKind::EndInterfaceKeyword },\
    { "endpackage", TokenKind::EndPackageKeyword },\
    { "endprogram", TokenKind::EndProgramKeyword },\
    { "endproperty", TokenKind::EndPropertyKeyword },\
    { "endsequence", TokenKind::EndSequenceKeyword },\
    { "enum", TokenKind::EnumKeyword },\
    { "expect", TokenKind::ExpectKeyword },\
    { "export", TokenKind::ExportKeyword },\
    { "extends", TokenKind::ExtendsKeyword },\
    { "extern", TokenKind::ExternKeyword },\
    { "final", TokenKind::FinalKeyword },\
    { "first_match", TokenKind::FirstMatchKeyword },\
    { "foreach", TokenKind::ForeachKeyword },\
    { "forkjoin", TokenKind::ForkJoinKeyword },\
    { "iff", TokenKind::IffKeyword },\
    { "ignore_bins", TokenKind::IgnoreBinsKeyword },\
    { "illegal_bins", TokenKind::IllegalBinsKeyword },\
    { "import", TokenKind::ImportKeyword },\
    { "inside", TokenKind::InsideKeyword },\
    { "int", TokenKind::IntKeyword },\
    { "interface", TokenKind::InterfaceKeyword },\
    { "intersect", TokenKind::IntersectKeyword },\
    { "join_any", TokenKind::JoinAnyKeyword },\
    { "join_none", TokenKind::JoinNoneKeyword },\
    { "local", TokenKind::LocalKeyword },\
    { "logic", TokenKind::LogicKeyword },\
    { "longint", TokenKind::LongIntKeyword },\
    { "matches", TokenKind::MatchesKeyword },\
    { "modport", TokenKind::ModPortKeyword },\
    { "new", TokenKind::NewKeyword },\
    { "null", TokenKind::NullKeyword },\
    { "package", TokenKind::PackageKeyword },\
    { "packed", TokenKind::PackedKeyword },\
    { "priority", TokenKind::PriorityKeyword },\
    { "program", TokenKind::ProgramKeyword },\
    { "property", TokenKind::PropertyKeyword },\
    { "protected", TokenKind::ProtectedKeyword },\
    { "pure", TokenKind::PureKeyword },\
    { "rand", TokenKind::RandKeyword },\
    { "randc", TokenKind::RandCKeyword },\
    { "randcase", TokenKind::RandCaseKeyword },\
    { "randsequence", TokenKind::RandSequenceKeyword },\
    { "ref", TokenKind::RefKeyword },\
    { "return", TokenKind::ReturnKeyword },\
    { "sequence", TokenKind::SequenceKeyword },\
    { "shortint", TokenKind::ShortIntKeyword },\
    { "shortreal", TokenKind::ShortRealKeyword },\
    { "solve", TokenKind::SolveKeyword },\
    { "static", TokenKind::StaticKeyword },\
    { "string", TokenKind::StringKeyword },\
    { "struct", TokenKind::StructKeyword },\
    { "super", TokenKind::SuperKeyword },\
    { "tagged", TokenKind::TaggedKeyword },\
    { "this", TokenKind::ThisKeyword },\
    { "throughout", TokenKind::ThroughoutKeyword },\
    { "timeprecision", TokenKind::TimePrecisionKeyword },\
    { "timeunit", TokenKind::TimeUnitKeyword },\
    { "type", TokenKind::TypeKeyword },\
    { "typedef", TokenKind::TypedefKeyword },\
    { "union", TokenKind::UnionKeyword },\
    { "unique", TokenKind::UniqueKeyword },\
    { "var", TokenKind::VarKeyword },\
    { "virtual", TokenKind::VirtualKeyword },\
    { "void", TokenKind::VoidKeyword },\
    { "wait_order", TokenKind::WaitOrderKeyword },\
    { "wildcard", TokenKind::WildcardKeyword },\
    { "with", TokenKind::WithKeyword },\
    { "within", TokenKind::WithinKeyword },\
    { "accept_on", TokenKind::AcceptOnKeyword },\
    { "checker", TokenKind::CheckerKeyword },\
    { "endchecker", TokenKind::EndCheckerKeyword },\
    { "eventually", TokenKind::EventuallyKeyword },\
    { "global", TokenKind::GlobalKeyword },\
    { "implies", TokenKind::ImpliesKeyword },\
    { "let", TokenKind::LetKeyword },\
    { "nexttime", TokenKind::NextTimeKeyword },\
    { "reject_on", TokenKind::RejectOnKeyword },\
    { "restrict", TokenKind::RestrictKeyword },\
    { "s_always", TokenKind::SAlwaysKeyword },\
    { "s_eventually", TokenKind::SEventuallyKeyword },\
    { "s_nexttime", TokenKind::SNextTimeKeyword },\
    { "s_until", TokenKind::SUntilKeyword },\
    { "s_until_with", TokenKind::SUntilWithKeyword },\
    { "strong", TokenKind::StrongKeyword },\
    { "sync_accept_on", TokenKind::SyncAcceptOnKeyword },\
    { "sync_reject_on", TokenKind::SyncRejectOnKeyword },\
    { "unique0", TokenKind::Unique0Keyword },\
    { "until", TokenKind::UntilKeyword },\
    { "until_with", TokenKind::UntilWithKeyword },\
    { "untyped", TokenKind::UntypedKeyword },\
    { "weak", TokenKind::WeakKeyword },\
    { "implements", TokenKind::ImplementsKeyword },\
    { "interconnect", TokenKind::InterconnectKeyword },\
    { "nettype", TokenKind::NetTypeKeyword },\
    { "define", TokenKind::DefineKeyword },\
    { "soft", TokenKind::SoftKeyword }
